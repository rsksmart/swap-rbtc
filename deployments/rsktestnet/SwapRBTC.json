{
  "address": "0x294c69bD8415219b41B68a2f065DeABB950dd489",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sideTokenBtc",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSwapped",
          "type": "uint256"
        }
      ],
      "name": "RbtcSwapRbtc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sideTokenBtc",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSwapped",
          "type": "uint256"
        }
      ],
      "name": "RbtcSwapSideToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalRBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalSideTokenBtc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sideTokenBtc",
          "type": "address"
        }
      ],
      "name": "sideTokenBtcAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sideTokenBtc",
          "type": "address"
        }
      ],
      "name": "sideTokenBtcRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sideTokenBtcContract",
          "type": "address"
        }
      ],
      "name": "addSideTokenBtc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sideTokenBtcContract",
          "type": "address"
        }
      ],
      "name": "containsSideTokenBtc",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sideTokenBtcContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lengthSideTokenBtc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sideTokenBtcContract",
          "type": "address"
        }
      ],
      "name": "removeSideTokenBtc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "sideTokenBtcAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sideTokenBtcContract",
          "type": "address"
        }
      ],
      "name": "swapRBTCtoSideTokenBtc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sideTokenBtcContract",
          "type": "address"
        }
      ],
      "name": "swapSideTokenBtctoRBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawalRBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sideTokenBtcContract",
          "type": "address"
        }
      ],
      "name": "withdrawalSideTokenBtc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x196d583e1fb985b3d2c870fd8080ff3d33547720d6eb59c01d847a222e4d4350",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x294c69bD8415219b41B68a2f065DeABB950dd489",
    "transactionIndex": 0,
    "gasUsed": "2988968",
    "logsBloom": "0x
    "blockHash": "0x011bfe0ff18aa6112a7d251aead7e5a35d05147d15a01eadd4373a3f6ae4e250",
    "transactionHash": "0x196d583e1fb985b3d2c870fd8080ff3d33547720d6eb59c01d847a222e4d4350",
    "logs": [],
    "blockNumber": 2639333,
    "cumulativeGasUsed": "2988968",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "14fcc2dd49cca0cc89c2adeaa70b4b1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sideTokenBtc\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSwapped\",\"type\":\"uint256\"}],\"name\":\"RbtcSwapRbtc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sideTokenBtc\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSwapped\",\"type\":\"uint256\"}],\"name\":\"RbtcSwapSideToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"WithdrawalSideTokenBtc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sideTokenBtc\",\"type\":\"address\"}],\"name\":\"sideTokenBtcAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sideTokenBtc\",\"type\":\"address\"}],\"name\":\"sideTokenBtcRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sideTokenBtcContract\",\"type\":\"address\"}],\"name\":\"addSideTokenBtc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sideTokenBtcContract\",\"type\":\"address\"}],\"name\":\"containsSideTokenBtc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sideTokenBtcContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lengthSideTokenBtc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sideTokenBtcContract\",\"type\":\"address\"}],\"name\":\"removeSideTokenBtc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"sideTokenBtcAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sideTokenBtcContract\",\"type\":\"address\"}],\"name\":\"swapRBTCtoSideTokenBtc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sideTokenBtcContract\",\"type\":\"address\"}],\"name\":\"swapSideTokenBtctoRBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalRBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sideTokenBtcContract\",\"type\":\"address\"}],\"name\":\"withdrawalSideTokenBtc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"Called by an `IERC777` token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so `IERC777.balanceOf`, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRBTC.sol\":\"SwapRBTC\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a5d61db2733202ba361e6d6741cd2e662380e22b80e987eacfc91973f2267dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x6e306f9ab28416a9e5931f0b6e264676e8ac68fad184f9a9d8bb125c6ec23bc3\",\"license\":\"MIT\"},\"contracts/ISideToken.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface ISideToken {\\n  /**\\n    * @dev Returns the name of the token.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n    * @dev Returns the symbol of the token, usually a shorter version of the\\n    * name.\\n  */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n    * @dev Returns the smallest part of the token that is not divisible. This\\n    * means all token operations (creation, movement and destruction) must have\\n    * amounts that are a multiple of this number.\\n    *\\n    * For most token contracts, this value will equal 1.\\n  */\\n  function granularity() external view returns (uint256);\\n\\n  /**\\n    * @dev Returns the amount of tokens in existence.\\n    */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n    * @dev Returns the amount of tokens owned by an account (`owner`).\\n    */\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  /**\\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n    *\\n    * If send or receive hooks are registered for the caller and `recipient`,\\n    * the corresponding functions will be called with `data` and empty\\n    * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\\n    *\\n    * Emits a `Sent` event.\\n    *\\n    * Requirements\\n    *\\n    * - the caller must have at least `amount` tokens.\\n    * - `recipient` cannot be the zero address.\\n    * - if `recipient` is a contract, it must implement the `tokensReceived`\\n    * interface.\\n    */\\n  function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n  /**\\n    * @dev Destroys `amount` tokens from the caller's account, reducing the\\n    * total supply.\\n    *\\n    * If a send hook is registered for the caller, the corresponding function\\n    * will be called with `data` and empty `operatorData`. See `IERC777Sender`.\\n    *\\n    * Emits a `Burned` event.\\n    *\\n    * Requirements\\n    *\\n    * - the caller must have at least `amount` tokens.\\n  */\\n  function burn(uint256 amount, bytes calldata data) external;\\n\\n  /**\\n    * @dev Returns true if an account is an operator of `tokenHolder`.\\n    * Operators can send and burn tokens on behalf of their owners. All\\n    * accounts are their own operator.\\n    *\\n    * See `operatorSend` and `operatorBurn`.\\n  */\\n  function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n  /**\\n    * @dev Make an account an operator of the caller.\\n    *\\n    * See `isOperatorFor`.\\n    *\\n    * Emits an `AuthorizedOperator` event.\\n    *\\n    * Requirements\\n    *\\n    * - `operator` cannot be calling address.\\n  */\\n  function authorizeOperator(address operator) external;\\n\\n  /**\\n    * @dev Make an account an operator of the caller.\\n    *\\n    * See `isOperatorFor` and `defaultOperators`.\\n    *\\n    * Emits a `RevokedOperator` event.\\n    *\\n    * Requirements\\n    *\\n    * - `operator` cannot be calling address.\\n  */\\n  function revokeOperator(address operator) external;\\n\\n  /**\\n    * @dev Returns the list of default operators. These accounts are operators\\n    * for all token holders, even if `authorizeOperator` was never called on\\n    * them.\\n    *\\n    * This list is immutable, but individual holders may revoke these via\\n    * `revokeOperator`, in which case `isOperatorFor` will return false.\\n  */\\n  function defaultOperators() external view returns (address[] memory);\\n\\n  /**\\n    * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n    * be an operator of `sender`.\\n    *\\n    * If send or receive hooks are registered for `sender` and `recipient`,\\n    * the corresponding functions will be called with `data` and\\n    * `operatorData`. See `IERC777Sender` and `IERC777Recipient`.\\n    *\\n    * Emits a `Sent` event.\\n    *\\n    * Requirements\\n    *\\n    * - `sender` cannot be the zero address.\\n    * - `sender` must have at least `amount` tokens.\\n    * - the caller must be an operator for `sender`.\\n    * - `recipient` cannot be the zero address.\\n    * - if `recipient` is a contract, it must implement the `tokensReceived`\\n    * interface.\\n  */\\n  function operatorSend(\\n    address sender,\\n    address recipient,\\n    uint256 amount,\\n    bytes calldata data,\\n    bytes calldata operatorData\\n  ) external;\\n\\n  /**\\n    * @dev Destoys `amount` tokens from `account`, reducing the total supply.\\n    * The caller must be an operator of `account`.\\n    *\\n    * If a send hook is registered for `account`, the corresponding function\\n    * will be called with `data` and `operatorData`. See `IERC777Sender`.\\n    *\\n    * Emits a `Burned` event.\\n    *\\n    * Requirements\\n    *\\n    * - `account` cannot be the zero address.\\n    * - `account` must have at least `amount` tokens.\\n    * - the caller must be an operator for `account`.\\n  */\\n  function operatorBurn(\\n    address account,\\n    uint256 amount,\\n    bytes calldata data,\\n    bytes calldata operatorData\\n  ) external;\\n\\n  event Sent(\\n    address indexed operator,\\n    address indexed from,\\n    address indexed to,\\n    uint256 amount,\\n    bytes data,\\n    bytes operatorData\\n  );\\n\\n  function decimals() external returns (uint8);\\n\\n  event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n  event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n  event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n  event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n\\n  // ERC20 METHODS\\n\\n  /**\\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n    * allowance mechanism. `amount` is then deducted from the caller's\\n    * allowance.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n  */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  // ISideToken METHODS\\n\\n  function mint(address account, uint256 amount, bytes calldata userData, bytes calldata operatorData) external;\\n}\",\"keccak256\":\"0x04e64e96623410b0eba0b6884e817551f216c943859fabeffac0a5d1ea4f9f66\",\"license\":\"Unlicense\"},\"contracts/ISwapRBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISwapRBTC {\\n\\n  function swapSideTokenBtctoRBTC(uint256 amount, address sideTokenBtcContract) external returns (uint256);\\n  function swapRBTCtoSideTokenBtc(uint256 amount, address sideTokenBtcContract) external payable returns (uint256);\\n  function withdrawalRBTC(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x72fff2e80a0ea66538c88e8851f1af58e86a6aa48bcfed7810c75202b3b409c5\",\"license\":\"MIT\"},\"contracts/SwapRBTC.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISideToken.sol\\\";\\nimport \\\"./ISwapRBTC.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\ncontract SwapRBTC is Initializable, OwnableUpgradeable, ISwapRBTC, IERC777Recipient {\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n  using SafeERC20Upgradeable for ISideToken;\\n\\n  event sideTokenBtcAdded(address sideTokenBtc);\\n  event sideTokenBtcRemoved(address sideTokenBtc);\\n  event RbtcSwapRbtc(address sideTokenBtc, uint256 amountSwapped);\\n  event RbtcSwapSideToken(address sideTokenBtc, uint256 amountSwapped);\\n  event WithdrawalRBTC(address indexed src, uint256 wad);\\n  event WithdrawalSideTokenBtc(address indexed src, uint256 wad);\\n  event Deposit(address sender, uint256 amount, address tokenAddress);\\n  \\n  IERC1820Registry constant internal ERC1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n  EnumerableSetUpgradeable.AddressSet internal enumerableSideTokenBtc;\\n\\n  // ISideToken sideTokenBtc; // sideEthereumBTC\\n  address internal constant NULL_ADDRESS = address(0);\\n  uint256 public fee;\\n\\n  mapping(address => uint256) public balance;\\n\\n  function initialize(address sideTokenBtcContract) public initializer {\\n    // _setSideTokenBtc(sideTokenBtcContract);\\n    _addSideTokenBtc(sideTokenBtcContract);\\n    // keccak256(\\\"ERC777TokensRecipient\\\")\\n    fee = 0;\\n    ERC1820.setInterfaceImplementer(address(this), 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b, address(this));\\n    __Ownable_init();\\n  }\\n\\n  receive() external payable {\\n\\t\\t// The fallback function is needed to receive RBTC\\n    _deposit(_msgSender(), msg.value, address(0));\\n\\t}\\n\\n  function _deposit(address from, uint256 amount, address tokenAddress) internal {\\n    balance[from] += amount;\\n    emit Deposit(from, amount, tokenAddress);\\n\\t}\\n\\n  function withdrawalRBTC(uint256 amount) external {\\n    require(address(this).balance >= amount, \\\"SwapRBTC: amount > balance\\\");\\n    require(balance[_msgSender()] >= amount, \\\"SwapRBTC: amount > senderBalance\\\");\\n    \\n    balance[_msgSender()] -= amount;\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool successCall,) = payable(_msgSender()).call{value: amount}(\\\"\\\");\\n    require(successCall, \\\"SwapRBTC: withdrawalRBTC failed\\\");\\n\\n    emit WithdrawalRBTC(_msgSender(), amount);\\n  }\\n\\n  function withdrawalSideTokenBtc(uint256 amount, address sideTokenBtcContract) external {\\n    require(enumerableSideTokenBtc.contains(sideTokenBtcContract), \\\"SwapRBTC: Side Token not found\\\");\\n    require(balance[_msgSender()] >= amount, \\\"SwapRBTC: amount > senderBalance\\\");\\n\\n    ISideToken sideTokenBtc = ISideToken(sideTokenBtcContract);\\n    require(sideTokenBtc.balanceOf(address(this)) >= amount, \\\"SwapRBTC: amount > balance\\\");\\n\\n    balance[_msgSender()] -= amount;\\n    bool successCall = IERC20(sideTokenBtcContract).transfer(_msgSender(), amount);\\n    require(successCall, \\\"SwapRBTC: withdrawalSideTokenBtc failed\\\");\\n    emit WithdrawalSideTokenBtc(_msgSender(), amount);\\n  }\\n\\n  function _addSideTokenBtc(address sideTokenBtcContract) internal {\\n    require(sideTokenBtcContract != NULL_ADDRESS, \\\"SwapRBTC: sideBTC is null\\\");\\n    require(!enumerableSideTokenBtc.contains(sideTokenBtcContract), \\\"SwapRBTC: side token already included\\\");\\n    enumerableSideTokenBtc.add(sideTokenBtcContract);\\n    emit sideTokenBtcAdded(sideTokenBtcContract);\\n  }\\n\\n  function addSideTokenBtc(address sideTokenBtcContract) public onlyOwner {\\n    _addSideTokenBtc(sideTokenBtcContract);\\n  }\\n\\n  function _removeSideTokenBtc(address sideTokenBtcContract) internal {\\n    require(sideTokenBtcContract != NULL_ADDRESS, \\\"SwapRBTC: sideBTC is null\\\");\\n    require(enumerableSideTokenBtc.contains(sideTokenBtcContract), \\\"SwapRBTC: side token not founded\\\");\\n    enumerableSideTokenBtc.remove(sideTokenBtcContract);\\n    emit sideTokenBtcRemoved(sideTokenBtcContract);\\n  }\\n\\n  function removeSideTokenBtc(address sideTokenBtcContract) public onlyOwner {\\n    _removeSideTokenBtc(sideTokenBtcContract);\\n  }\\n\\n  function lengthSideTokenBtc() public view returns(uint256) {\\n    return enumerableSideTokenBtc.length();\\n  }\\n\\n  function containsSideTokenBtc(address sideTokenBtcContract) public view returns(bool) {\\n    return enumerableSideTokenBtc.contains(sideTokenBtcContract);\\n  }\\n\\n  function sideTokenBtcAt(uint256 index) public view returns(address) {\\n    return enumerableSideTokenBtc.at(index);\\n  }\\n\\n  function swapSideTokenBtctoRBTC(uint256 amount, address sideTokenBtcContract) external override returns (uint256) {\\n    require(enumerableSideTokenBtc.contains(sideTokenBtcContract), \\\"SwapRBTC: Side Token not found\\\");\\n    ISideToken sideTokenBtc = ISideToken(sideTokenBtcContract);\\n\\n    address payable sender = payable(_msgSender());\\n    require(sideTokenBtc.balanceOf(sender) >= amount, \\\"SwapRBTC: not enough balance\\\");\\n\\n    bool successTransfer = sideTokenBtc.transferFrom(sender, address(this), amount);\\n\\n    require(successTransfer, \\\"SwapRBTC: Transfer sender failed\\\");\\n    require(address(this).balance >= amount, \\\"SwapRBTC: amount > balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool successCall,) = sender.call{value: amount}(\\\"\\\");\\n    require(successCall, \\\"SwapRBTC: Swap call failed\\\");\\n    emit RbtcSwapRbtc(address(sideTokenBtc), amount);\\n    return amount;\\n  }\\n\\n  function swapRBTCtoSideTokenBtc(uint256 amount, address sideTokenBtcContract) external payable override returns (uint256) {\\n    require(enumerableSideTokenBtc.contains(sideTokenBtcContract), \\\"SwapRBTC: Side Token not found\\\");\\n    ISideToken sideToken = ISideToken(sideTokenBtcContract);\\n    address sender = _msgSender();\\n    \\n    require(address(this).balance >= amount, \\\"SwapRBTC: amount > balance\\\");\\n    require(sideToken.balanceOf(address(this)) >= amount, \\\"SwapRBTC: not enough balance\\\");\\n    require(balance[sender] >= amount, \\\"SwapRBTC: sender not enough balance\\\");\\n\\n    balance[sender] -= amount;\\n    bool successTransfer = IERC20(sideTokenBtcContract).transfer(sender, amount);\\n\\n    require(successTransfer, \\\"SwapRBTC: Transfer sender failed\\\");\\n\\n    emit RbtcSwapSideToken(address(sideToken), amount);\\n    return amount;\\n  }\\n\\n  /**\\n    * @dev Called by an `IERC777` token contract whenever tokens are being\\n    * moved or created into a registered account (`to`). The type of operation\\n    * is conveyed by `from` being the zero address or not.\\n    *\\n    * This call occurs _after_ the token contract's state is updated, so\\n    * `IERC777.balanceOf`, etc., can be used to query the post-operation state.\\n    *\\n    * This function may revert to prevent the operation from being executed.\\n  */\\n  function tokensReceived(\\n    address,\\n    address from,\\n    address to,\\n    uint amount,\\n    bytes calldata,\\n    bytes calldata\\n  ) external override {\\n    //Hook from ERC777address / ERC20\\n    address tokenAddress = _msgSender();\\n  \\tif(from == address(this)) return; // WARN: we don't deposit when the caller was the contract itself as that would duplicate the deposit.\\n\\t\\trequire(to == address(this), \\\"SwapRBTC: Invalid 'to' address\\\"); // verify that the 'to' address is the same as the address of this contract.\\n    require(enumerableSideTokenBtc.contains(tokenAddress), \\\"SwapRBTC: Side Token not found\\\");\\n    \\n    _deposit(from, amount, tokenAddress);\\n  }\\n}\\n\",\"keccak256\":\"0x5217c2d5128cd14740fc059ea088b3d40dfb8c5c7312fcfe2c3009a07e1c2d0b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c1f806100206000396000f3fe6080604052600436106100f65760003560e01c8063c5e3e5411161008a578063ec13a21611610059578063ec13a21614610324578063f2347ee41461034d578063f2fde38b1461038a578063fadc396e146103b357610110565b8063c5e3e54114610256578063ddca3f4314610293578063e3d670d7146102be578063e67c7973146102fb57610110565b8063803a48ea116100c6578063803a48ea146101a75780638da5cb5b146101d757806397aab46a14610202578063c4d66de81461022d57610110565b806223de2914610115578063073b1e5d1461013e5780636744283614610167578063715018a61461019057610110565b366101105761010e6101066103f0565b3460006103f8565b005b600080fd5b34801561012157600080fd5b5061013c60048036038101906101379190611e43565b61048e565b005b34801561014a57600080fd5b5061016560048036038101906101609190611f12565b6105ac565b005b34801561017357600080fd5b5061018e60048036038101906101899190611f52565b6108e8565b005b34801561019c57600080fd5b506101a5610970565b005b6101c160048036038101906101bc9190611f12565b6109f8565b6040516101ce9190611f8e565b60405180910390f35b3480156101e357600080fd5b506101ec610d5a565b6040516101f99190611fb8565b60405180910390f35b34801561020e57600080fd5b50610217610d84565b6040516102249190611f8e565b60405180910390f35b34801561023957600080fd5b50610254600480360381019061024f9190611f52565b610d95565b005b34801561026257600080fd5b5061027d60048036038101906102789190611fd3565b610f36565b60405161028a9190611fb8565b60405180910390f35b34801561029f57600080fd5b506102a8610f53565b6040516102b59190611f8e565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e09190611f52565b610f59565b6040516102f29190611f8e565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d9190611fd3565b610f71565b005b34801561033057600080fd5b5061034b60048036038101906103469190611f52565b6111a6565b005b34801561035957600080fd5b50610374600480360381019061036f9190611f52565b61122e565b604051610381919061201b565b60405180910390f35b34801561039657600080fd5b506103b160048036038101906103ac9190611f52565b61124b565b005b3480156103bf57600080fd5b506103da60048036038101906103d59190611f12565b611343565b6040516103e79190611f8e565b60405180910390f35b600033905090565b81606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104479190612065565b925050819055507fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f838383604051610481939291906120bb565b60405180910390a1505050565b60006104986103f0565b90503073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156104d457506105a2565b3073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614610542576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105399061214f565b60405180910390fd5b61055681606561167c90919063ffffffff16565b610595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058c906121bb565b60405180910390fd5b6105a08887836103f8565b505b5050505050505050565b6105c081606561167c90919063ffffffff16565b6105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f6906121bb565b60405180910390fd5b816068600061060c6103f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90612227565b60405180910390fd5b6000819050828173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106c79190611fb8565b60206040518083038186803b1580156106df57600080fd5b505afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610717919061225c565b1015610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f906122d5565b60405180910390fd5b82606860006107656103f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107ae91906122f5565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6107db6103f0565b866040518363ffffffff1660e01b81526004016107f9929190612329565b602060405180830381600087803b15801561081357600080fd5b505af1158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b919061237e565b90508061088d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108849061241d565b60405180910390fd5b6108956103f0565b73ffffffffffffffffffffffffffffffffffffffff167f309f97aacc7a2d05d51f6f49e6fbf88d07ce3cc150b737f2cee636f3b7ba1418856040516108da9190611f8e565b60405180910390a250505050565b6108f06103f0565b73ffffffffffffffffffffffffffffffffffffffff1661090e610d5a565b73ffffffffffffffffffffffffffffffffffffffff1614610964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095b90612489565b60405180910390fd5b61096d816116ac565b50565b6109786103f0565b73ffffffffffffffffffffffffffffffffffffffff16610996610d5a565b73ffffffffffffffffffffffffffffffffffffffff16146109ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e390612489565b60405180910390fd5b6109f660006117be565b565b6000610a0e82606561167c90919063ffffffff16565b610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a44906121bb565b60405180910390fd5b60008290506000610a5c6103f0565b905084471015610aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a98906122d5565b60405180910390fd5b848273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610adb9190611fb8565b60206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b919061225c565b1015610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b63906124f5565b60405180910390fd5b84606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be590612587565b60405180910390fd5b84606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c3d91906122f5565b9250508190555060008473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83886040518363ffffffff1660e01b8152600401610c81929190612329565b602060405180830381600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd3919061237e565b905080610d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0c906125f3565b60405180910390fd5b7f52dcf9c6599739b95a0ee3e6c7beea670b681fd395cb9e76eca9409391033b898387604051610d46929190612329565b60405180910390a185935050505092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610d906065611884565b905090565b600060019054906101000a900460ff16610dbd5760008054906101000a900460ff1615610dc6565b610dc5611899565b5b610e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfc90612685565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e55576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610e5e826118aa565b6000606781905550731820a4b7618bde71dce8cdc73aab6c95905fad2473ffffffffffffffffffffffffffffffffffffffff166329965a1d307fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b306040518463ffffffff1660e01b8152600401610ed7939291906126f7565b600060405180830381600087803b158015610ef157600080fd5b505af1158015610f05573d6000803e3d6000fd5b50505050610f116119bd565b8015610f325760008060016101000a81548160ff0219169083151502179055505b5050565b6000610f4c826065611a1e90919063ffffffff16565b9050919050565b60675481565b60686020528060005260406000206000915090505481565b80471015610fb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fab906122d5565b60405180910390fd5b8060686000610fc16103f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561103d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103490612227565b60405180910390fd5b806068600061104a6103f0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461109391906122f5565b9250508190555060006110a46103f0565b73ffffffffffffffffffffffffffffffffffffffff16826040516110c79061275f565b60006040518083038185875af1925050503d8060008114611104576040519150601f19603f3d011682016040523d82523d6000602084013e611109565b606091505b505090508061114d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611144906127c0565b60405180910390fd5b6111556103f0565b73ffffffffffffffffffffffffffffffffffffffff167fac3ced7ebc0f62e1780ce041c7bca97e6a868d3825e0c5e63645d81667a1ef478360405161119a9190611f8e565b60405180910390a25050565b6111ae6103f0565b73ffffffffffffffffffffffffffffffffffffffff166111cc610d5a565b73ffffffffffffffffffffffffffffffffffffffff1614611222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121990612489565b60405180910390fd5b61122b816118aa565b50565b600061124482606561167c90919063ffffffff16565b9050919050565b6112536103f0565b73ffffffffffffffffffffffffffffffffffffffff16611271610d5a565b73ffffffffffffffffffffffffffffffffffffffff16146112c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112be90612489565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132e90612852565b60405180910390fd5b611340816117be565b50565b600061135982606561167c90919063ffffffff16565b611398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138f906121bb565b60405180910390fd5b600082905060006113a76103f0565b9050848273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016113e391906128d1565b60206040518083038186803b1580156113fb57600080fd5b505afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611433919061225c565b1015611474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146b906124f5565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd8330896040518463ffffffff1660e01b81526004016114b3939291906128ec565b602060405180830381600087803b1580156114cd57600080fd5b505af11580156114e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611505919061237e565b905080611547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153e906125f3565b60405180910390fd5b8547101561158a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611581906122d5565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16876040516115b09061275f565b60006040518083038185875af1925050503d80600081146115ed576040519150601f19603f3d011682016040523d82523d6000602084013e6115f2565b606091505b5050905080611636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162d9061296f565b60405180910390fd5b7f9b7cc79a7695841c987748d37c497f0ccc8c3828cb7d1e90abc727e2d262e1118488604051611667929190612329565b60405180910390a18694505050505092915050565b60006116a4836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611a38565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561171c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611713906129db565b60405180910390fd5b61173081606561167c90919063ffffffff16565b61176f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176690612a47565b60405180910390fd5b611783816065611a5b90919063ffffffff16565b507f7bc6a2dbdd6490b0e94125d3e4df5d96d92b84835ab35a2a0abce4bc4693fd0c816040516117b39190611fb8565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061189282600001611a8b565b9050919050565b60006118a430611a9c565b15905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561191a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611911906129db565b60405180910390fd5b61192e81606561167c90919063ffffffff16565b1561196e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196590612ad9565b60405180910390fd5b611982816065611aaf90919063ffffffff16565b507ff919e247c8640e0dc5ea2505455e2a680f59e1038b1dddef02abc4067753f5b0816040516119b29190611fb8565b60405180910390a150565b600060019054906101000a900460ff16611a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0390612b6b565b60405180910390fd5b611a14611adf565b611a1c611b30565b565b6000611a2d8360000183611b91565b60001c905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000611a83836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611bbc565b905092915050565b600081600001805490509050919050565b600080823b905060008111915050919050565b6000611ad7836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611cd0565b905092915050565b600060019054906101000a900460ff16611b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2590612b6b565b60405180910390fd5b565b600060019054906101000a900460ff16611b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7690612b6b565b60405180910390fd5b611b8f611b8a6103f0565b6117be565b565b6000826000018281548110611ba957611ba8612b8b565b5b9060005260206000200154905092915050565b60008083600101600084815260200190815260200160002054905060008114611cc4576000600182611bee91906122f5565b9050600060018660000180549050611c0691906122f5565b9050818114611c75576000866000018281548110611c2757611c26612b8b565b5b9060005260206000200154905080876000018481548110611c4b57611c4a612b8b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611c8957611c88612bba565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611cca565b60009150505b92915050565b6000611cdc8383611a38565b611d35578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611d3a565b600090505b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d7582611d4a565b9050919050565b611d8581611d6a565b8114611d9057600080fd5b50565b600081359050611da281611d7c565b92915050565b6000819050919050565b611dbb81611da8565b8114611dc657600080fd5b50565b600081359050611dd881611db2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e0357611e02611dde565b5b8235905067ffffffffffffffff811115611e2057611e1f611de3565b5b602083019150836001820283011115611e3c57611e3b611de8565b5b9250929050565b60008060008060008060008060c0898b031215611e6357611e62611d40565b5b6000611e718b828c01611d93565b9850506020611e828b828c01611d93565b9750506040611e938b828c01611d93565b9650506060611ea48b828c01611dc9565b955050608089013567ffffffffffffffff811115611ec557611ec4611d45565b5b611ed18b828c01611ded565b945094505060a089013567ffffffffffffffff811115611ef457611ef3611d45565b5b611f008b828c01611ded565b92509250509295985092959890939650565b60008060408385031215611f2957611f28611d40565b5b6000611f3785828601611dc9565b9250506020611f4885828601611d93565b9150509250929050565b600060208284031215611f6857611f67611d40565b5b6000611f7684828501611d93565b91505092915050565b611f8881611da8565b82525050565b6000602082019050611fa36000830184611f7f565b92915050565b611fb281611d6a565b82525050565b6000602082019050611fcd6000830184611fa9565b92915050565b600060208284031215611fe957611fe8611d40565b5b6000611ff784828501611dc9565b91505092915050565b60008115159050919050565b61201581612000565b82525050565b6000602082019050612030600083018461200c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061207082611da8565b915061207b83611da8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120b0576120af612036565b5b828201905092915050565b60006060820190506120d06000830186611fa9565b6120dd6020830185611f7f565b6120ea6040830184611fa9565b949350505050565b600082825260208201905092915050565b7f53776170524254433a20496e76616c69642027746f2720616464726573730000600082015250565b6000612139601e836120f2565b915061214482612103565b602082019050919050565b600060208201905081810360008301526121688161212c565b9050919050565b7f53776170524254433a205369646520546f6b656e206e6f7420666f756e640000600082015250565b60006121a5601e836120f2565b91506121b08261216f565b602082019050919050565b600060208201905081810360008301526121d481612198565b9050919050565b7f53776170524254433a20616d6f756e74203e2073656e64657242616c616e6365600082015250565b60006122116020836120f2565b915061221c826121db565b602082019050919050565b6000602082019050818103600083015261224081612204565b9050919050565b60008151905061225681611db2565b92915050565b60006020828403121561227257612271611d40565b5b600061228084828501612247565b91505092915050565b7f53776170524254433a20616d6f756e74203e2062616c616e6365000000000000600082015250565b60006122bf601a836120f2565b91506122ca82612289565b602082019050919050565b600060208201905081810360008301526122ee816122b2565b9050919050565b600061230082611da8565b915061230b83611da8565b92508282101561231e5761231d612036565b5b828203905092915050565b600060408201905061233e6000830185611fa9565b61234b6020830184611f7f565b9392505050565b61235b81612000565b811461236657600080fd5b50565b60008151905061237881612352565b92915050565b60006020828403121561239457612393611d40565b5b60006123a284828501612369565b91505092915050565b7f53776170524254433a207769746864726177616c53696465546f6b656e42746360008201527f206661696c656400000000000000000000000000000000000000000000000000602082015250565b60006124076027836120f2565b9150612412826123ab565b604082019050919050565b60006020820190508181036000830152612436816123fa565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006124736020836120f2565b915061247e8261243d565b602082019050919050565b600060208201905081810360008301526124a281612466565b9050919050565b7f53776170524254433a206e6f7420656e6f7567682062616c616e636500000000600082015250565b60006124df601c836120f2565b91506124ea826124a9565b602082019050919050565b6000602082019050818103600083015261250e816124d2565b9050919050565b7f53776170524254433a2073656e646572206e6f7420656e6f7567682062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b60006125716023836120f2565b915061257c82612515565b604082019050919050565b600060208201905081810360008301526125a081612564565b9050919050565b7f53776170524254433a205472616e736665722073656e646572206661696c6564600082015250565b60006125dd6020836120f2565b91506125e8826125a7565b602082019050919050565b6000602082019050818103600083015261260c816125d0565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061266f602e836120f2565b915061267a82612613565b604082019050919050565b6000602082019050818103600083015261269e81612662565b9050919050565b6000819050919050565b6000819050919050565b60008160001b9050919050565b60006126e16126dc6126d7846126a5565b6126b9565b6126af565b9050919050565b6126f1816126c6565b82525050565b600060608201905061270c6000830186611fa9565b61271960208301856126e8565b6127266040830184611fa9565b949350505050565b600081905092915050565b50565b600061274960008361272e565b915061275482612739565b600082019050919050565b600061276a8261273c565b9150819050919050565b7f53776170524254433a207769746864726177616c52425443206661696c656400600082015250565b60006127aa601f836120f2565b91506127b582612774565b602082019050919050565b600060208201905081810360008301526127d98161279d565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061283c6026836120f2565b9150612847826127e0565b604082019050919050565b6000602082019050818103600083015261286b8161282f565b9050919050565b6000819050919050565b600061289761289261288d84611d4a565b612872565b611d4a565b9050919050565b60006128a98261287c565b9050919050565b60006128bb8261289e565b9050919050565b6128cb816128b0565b82525050565b60006020820190506128e660008301846128c2565b92915050565b600060608201905061290160008301866128c2565b61290e6020830185611fa9565b61291b6040830184611f7f565b949350505050565b7f53776170524254433a20537761702063616c6c206661696c6564000000000000600082015250565b6000612959601a836120f2565b915061296482612923565b602082019050919050565b600060208201905081810360008301526129888161294c565b9050919050565b7f53776170524254433a2073696465425443206973206e756c6c00000000000000600082015250565b60006129c56019836120f2565b91506129d08261298f565b602082019050919050565b600060208201905081810360008301526129f4816129b8565b9050919050565b7f53776170524254433a207369646520746f6b656e206e6f7420666f756e646564600082015250565b6000612a316020836120f2565b9150612a3c826129fb565b602082019050919050565b60006020820190508181036000830152612a6081612a24565b9050919050565b7f53776170524254433a207369646520746f6b656e20616c726561647920696e6360008201527f6c75646564000000000000000000000000000000000000000000000000000000602082015250565b6000612ac36025836120f2565b9150612ace82612a67565b604082019050919050565b60006020820190508181036000830152612af281612ab6565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612b55602b836120f2565b9150612b6082612af9565b604082019050919050565b60006020820190508181036000830152612b8481612b48565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220f98068d7a3fc9d7a4c8218d6cea10e436ae96514617a2368910c36f848f104ff64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "Called by an `IERC777` token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so `IERC777.balanceOf`, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 132,
        "contract": "contracts/SwapRBTC.sol:SwapRBTC",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 135,
        "contract": "contracts/SwapRBTC.sol:SwapRBTC",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 789,
        "contract": "contracts/SwapRBTC.sol:SwapRBTC",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SwapRBTC.sol:SwapRBTC",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/SwapRBTC.sol:SwapRBTC",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3273,
        "contract": "contracts/SwapRBTC.sol:SwapRBTC",
        "label": "enumerableSideTokenBtc",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(AddressSet)1102_storage"
      },
      {
        "astId": 3281,
        "contract": "contracts/SwapRBTC.sol:SwapRBTC",
        "label": "fee",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 3285,
        "contract": "contracts/SwapRBTC.sol:SwapRBTC",
        "label": "balance",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1102_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 1101,
            "contract": "contracts/SwapRBTC.sol:SwapRBTC",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)801_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)801_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 796,
            "contract": "contracts/SwapRBTC.sol:SwapRBTC",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 800,
            "contract": "contracts/SwapRBTC.sol:SwapRBTC",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}